package com.lovingapp.loving.controller;

import com.lovingapp.loving.dto.RitualDTO;
import com.lovingapp.loving.mapper.RitualMapper;
import com.lovingapp.loving.model.Ritual;
import com.lovingapp.loving.repository.RitualRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@RestController
@RequiredArgsConstructor
@CrossOrigin(origins = "*")
@RequestMapping("/api/rituals")
public class RitualController {

    private final RitualRepository ritualRepository;

    @GetMapping
    public List<RitualDTO> getAll() {
        return ritualRepository.findAll().stream()
                .map(RitualMapper::toDto)
                .collect(Collectors.toList());
    }

    @GetMapping("/{id}")
    public ResponseEntity<RitualDTO> getById(@PathVariable("id") UUID id) {
        return ritualRepository.findById(id)
                .map(RitualMapper::toDto)
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<RitualDTO> create(@RequestBody RitualDTO request) {
        // Ignore client-provided id on create; it will be generated by JPA
        request.setId(null);
        Ritual entity = RitualMapper.fromDto(request);
        Ritual saved = ritualRepository.save(entity);
        RitualDTO body = RitualMapper.toDto(saved);
        return ResponseEntity.created(URI.create("/api/rituals/" + saved.getId())).body(body);
    }

    @PutMapping("/{id}")
    public ResponseEntity<RitualDTO> update(@PathVariable("id") UUID id, @RequestBody RitualDTO request) {
        return ritualRepository.findById(id)
                .map(existing -> {
                    // Ensure ID consistency
                    request.setId(existing.getId());
                    RitualMapper.updateEntityFromDto(request, existing);
                    Ritual saved = ritualRepository.save(existing);
                    return ResponseEntity.ok(RitualMapper.toDto(saved));
                })
                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable("id") UUID id) {
        return ritualRepository.findById(id)
                .map(existing -> {
                    ritualRepository.delete(existing);
                    return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
                })
                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }
}
