package com.lovingapp.loving.service;

import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.lovingapp.loving.exception.ResourceNotFoundException;
import com.lovingapp.loving.mapper.RitualMapper;
import com.lovingapp.loving.model.dto.RitualDTO;
import com.lovingapp.loving.model.entity.Ritual;
import com.lovingapp.loving.repository.RitualRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class RitualService {

    private final RitualRepository ritualRepository;

    @Transactional(readOnly = true)
    public List<RitualDTO> getAllRituals() {
        return ritualRepository.findAll().stream()
                .map(RitualMapper::toDto)
                .collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public RitualDTO getRitualById(UUID id) {
        return ritualRepository.findById(id)
                .map(RitualMapper::toDto)
                .orElseThrow(() -> new ResourceNotFoundException("Ritual not found with id: " + id));
    }

    @Transactional(readOnly = true)
    public List<RitualDTO> findAllById(List<UUID> ids) {
        if (ids == null || ids.isEmpty()) {
            return Collections.emptyList();
        }
        return ritualRepository.findAllById(ids).stream()
                .map(RitualMapper::toDto)
                .collect(Collectors.toList());
    }

    @Transactional
    public RitualDTO createRitual(RitualDTO ritualDTO) {
        ritualDTO.setId(null); // Ensure ID is generated by JPA
        Ritual ritual = RitualMapper.fromDto(ritualDTO);
        Ritual savedRitual = ritualRepository.save(ritual);
        return RitualMapper.toDto(savedRitual);
    }

    @Transactional
    public RitualDTO updateRitual(UUID id, RitualDTO ritualDTO) {
        return ritualRepository.findById(id)
                .map(existingRitual -> {
                    ritualDTO.setId(id); // Ensure ID consistency
                    RitualMapper.updateEntityFromDto(ritualDTO, existingRitual);
                    Ritual updatedRitual = ritualRepository.save(existingRitual);
                    return RitualMapper.toDto(updatedRitual);
                })
                .orElseThrow(() -> new ResourceNotFoundException("Ritual not found with id: " + id));
    }

    @Transactional
    public void deleteRitual(UUID id) {
        Ritual ritual = ritualRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Ritual not found with id: " + id));
        ritualRepository.delete(ritual);
    }
}
